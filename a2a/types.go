// Intial Code generated by github.com/atombender/go-jsonschema
// Modified to fit the requirements

package a2a

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/mitchellh/mapstructure"
)

type A2ARequest interface{}

type AgentAuthentication struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentAuthentication) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["schemes"]; raw != nil && !ok {
		return fmt.Errorf("field schemes in AgentAuthentication: required")
	}
	type Plain AgentAuthentication
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = AgentAuthentication(plain)
	return nil
}

type AgentCapabilities struct {
	// PushNotifications corresponds to the JSON schema field "pushNotifications".
	PushNotifications bool `json:"pushNotifications,omitempty" yaml:"pushNotifications,omitempty" mapstructure:"pushNotifications,omitempty"`

	// StateTransitionHistory corresponds to the JSON schema field
	// "stateTransitionHistory".
	StateTransitionHistory bool `json:"stateTransitionHistory,omitempty" yaml:"stateTransitionHistory,omitempty" mapstructure:"stateTransitionHistory,omitempty"`

	// Streaming corresponds to the JSON schema field "streaming".
	Streaming bool `json:"streaming,omitempty" yaml:"streaming,omitempty" mapstructure:"streaming,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentCapabilities) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain AgentCapabilities
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["pushNotifications"]; !ok || v == nil {
		plain.PushNotifications = false
	}
	if v, ok := raw["stateTransitionHistory"]; !ok || v == nil {
		plain.StateTransitionHistory = false
	}
	if v, ok := raw["streaming"]; !ok || v == nil {
		plain.Streaming = false
	}
	*j = AgentCapabilities(plain)
	return nil
}

type AgentCard struct {
	// Authentication corresponds to the JSON schema field "authentication".
	Authentication *AgentCardAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities AgentCapabilities `json:"capabilities" yaml:"capabilities" mapstructure:"capabilities"`

	// DefaultInputModes corresponds to the JSON schema field "defaultInputModes".
	DefaultInputModes []string `json:"defaultInputModes,omitempty" yaml:"defaultInputModes,omitempty" mapstructure:"defaultInputModes,omitempty"`

	// DefaultOutputModes corresponds to the JSON schema field "defaultOutputModes".
	DefaultOutputModes []string `json:"defaultOutputModes,omitempty" yaml:"defaultOutputModes,omitempty" mapstructure:"defaultOutputModes,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// DocumentationUrl corresponds to the JSON schema field "documentationUrl".
	DocumentationUrl string `json:"documentationUrl,omitempty" yaml:"documentationUrl,omitempty" mapstructure:"documentationUrl,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Provider corresponds to the JSON schema field "provider".
	Provider *AgentCardProvider `json:"provider,omitempty" yaml:"provider,omitempty" mapstructure:"provider,omitempty"`

	// Skills corresponds to the JSON schema field "skills".
	Skills []AgentSkill `json:"skills" yaml:"skills" mapstructure:"skills"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`

	// Version corresponds to the JSON schema field "version".
	Version string `json:"version" yaml:"version" mapstructure:"version"`
}

type AgentCardAuthentication struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentCardAuthentication) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var agentCardAuthentication_0 AgentCardAuthentication
	var agentCardAuthentication_1 AgentCardAuthentication
	var errs []error
	if err := agentCardAuthentication_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := agentCardAuthentication_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain AgentCardAuthentication
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = AgentCardAuthentication(plain)
	return nil
}

type AgentCardProvider struct {
	// Organization corresponds to the JSON schema field "organization".
	Organization string `json:"organization" yaml:"organization" mapstructure:"organization"`

	// Url corresponds to the JSON schema field "url".
	Url interface{} `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentCardProvider) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var agentCardProvider_0 AgentCardProvider
	var agentCardProvider_1 AgentCardProvider
	var errs []error
	if err := agentCardProvider_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := agentCardProvider_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain AgentCardProvider
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = AgentCardProvider(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentCard) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["capabilities"]; raw != nil && !ok {
		return fmt.Errorf("field capabilities in AgentCard: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in AgentCard: required")
	}
	if _, ok := raw["skills"]; raw != nil && !ok {
		return fmt.Errorf("field skills in AgentCard: required")
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in AgentCard: required")
	}
	if _, ok := raw["version"]; raw != nil && !ok {
		return fmt.Errorf("field version in AgentCard: required")
	}
	type Plain AgentCard
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["defaultInputModes"]; !ok || v == nil {
		plain.DefaultInputModes = []string{
			"text",
		}
	}
	if v, ok := raw["defaultOutputModes"]; !ok || v == nil {
		plain.DefaultOutputModes = []string{
			"text",
		}
	}
	*j = AgentCard(plain)
	return nil
}

type AgentProvider struct {
	// Organization corresponds to the JSON schema field "organization".
	Organization string `json:"organization" yaml:"organization" mapstructure:"organization"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentProvider) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["organization"]; raw != nil && !ok {
		return fmt.Errorf("field organization in AgentProvider: required")
	}
	type Plain AgentProvider
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = AgentProvider(plain)
	return nil
}

type AgentSkill struct {
	// Description corresponds to the JSON schema field "description".
	Description string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Examples corresponds to the JSON schema field "examples".
	Examples []string `json:"examples,omitempty" yaml:"examples,omitempty" mapstructure:"examples,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// InputModes corresponds to the JSON schema field "inputModes".
	InputModes []string `json:"inputModes,omitempty" yaml:"inputModes,omitempty" mapstructure:"inputModes,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// OutputModes corresponds to the JSON schema field "outputModes".
	OutputModes []string `json:"outputModes,omitempty" yaml:"outputModes,omitempty" mapstructure:"outputModes,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AgentSkill) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in AgentSkill: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in AgentSkill: required")
	}
	type Plain AgentSkill
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = AgentSkill(plain)
	return nil
}

type Artifact struct {
	// Append corresponds to the JSON schema field "append".
	Append bool `json:"append,omitempty" yaml:"append,omitempty" mapstructure:"append,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Index corresponds to the JSON schema field "index".
	Index int `json:"index,omitempty" yaml:"index,omitempty" mapstructure:"index,omitempty"`

	// LastChunk corresponds to the JSON schema field "lastChunk".
	LastChunk bool `json:"lastChunk,omitempty" yaml:"lastChunk,omitempty" mapstructure:"lastChunk,omitempty"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata ArtifactMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Parts corresponds to the JSON schema field "parts".
	Parts []ArtifactPartsElem `json:"parts" yaml:"parts" mapstructure:"parts"`
}

type ArtifactMetadata map[string]interface{}

type ArtifactMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ArtifactMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain ArtifactMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ArtifactMetadata_0(plain)
	return nil
}

type ArtifactPartsElem interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Artifact) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["parts"]; raw != nil && !ok {
		return fmt.Errorf("field parts in Artifact: required")
	}
	type Plain Artifact
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		plain.Index = 0.0
	}
	*j = Artifact(plain)
	return nil
}

type AuthenticationInfo struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthenticationInfo) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["schemes"]; raw != nil && !ok {
		return fmt.Errorf("field schemes in AuthenticationInfo: required")
	}
	type Plain AuthenticationInfo
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	st := reflect.TypeOf(Plain{})
	for i := range st.NumField() {
		delete(raw, st.Field(i).Name)
		delete(raw, strings.Split(st.Field(i).Tag.Get("json"), ",")[0])
	}
	if err := mapstructure.Decode(raw, &plain.AdditionalProperties); err != nil {
		return err
	}
	*j = AuthenticationInfo(plain)
	return nil
}

type CancelTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskIdParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelTaskRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in CancelTaskRequest: required")
	}
	type Plain CancelTaskRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/cancel"
	}
	*j = CancelTaskRequest(plain)
	return nil
}

type CancelTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *CancelTaskResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *CancelTaskResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type CancelTaskResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelTaskResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var cancelTaskResponseError_0 CancelTaskResponseError
	var cancelTaskResponseError_1 CancelTaskResponseError
	var errs []error
	if err := cancelTaskResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := cancelTaskResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain CancelTaskResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = CancelTaskResponseError(plain)
	return nil
}

type CancelTaskResponseResult struct {
	// Artifacts corresponds to the JSON schema field "artifacts".
	Artifacts []Artifact `json:"artifacts,omitempty" yaml:"artifacts,omitempty" mapstructure:"artifacts,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata CancelTaskResponseResultMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type CancelTaskResponseResultMetadata map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelTaskResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var cancelTaskResponseResult_0 CancelTaskResponseResult
	var cancelTaskResponseResult_1 CancelTaskResponseResult
	var errs []error
	if err := cancelTaskResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := cancelTaskResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain CancelTaskResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = CancelTaskResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelTaskResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain CancelTaskResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = CancelTaskResponse(plain)
	return nil
}

type DataPart struct {
	// Data corresponds to the JSON schema field "data".
	Data DataPartData `json:"data" yaml:"data" mapstructure:"data"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata DataPartMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Type of the part
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type DataPartData map[string]interface{}

type DataPartMetadata map[string]interface{}

type DataPartMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DataPartMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain DataPartMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = DataPartMetadata_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DataPart) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in DataPart: required")
	}
	type Plain DataPart
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "data"
	}
	*j = DataPart(plain)
	return nil
}

// Represents the content of a file, either as base64 encoded bytes or a URI.
//
// Ensures that either 'bytes' or 'uri' is provided, but not both.
type FileContent struct {
	// Bytes corresponds to the JSON schema field "bytes".
	Bytes []byte `json:"bytes,omitempty" yaml:"bytes,omitempty" mapstructure:"bytes,omitempty"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType string `json:"mimeType,omitempty" yaml:"mimeType,omitempty" mapstructure:"mimeType,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Uri corresponds to the JSON schema field "uri".
	Uri string `json:"uri,omitempty" yaml:"uri,omitempty" mapstructure:"uri,omitempty"`
}

type FilePart struct {
	// File corresponds to the JSON schema field "file".
	File FileContent `json:"file" yaml:"file" mapstructure:"file"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata FilePartMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Type of the part
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type FilePartMetadata map[string]interface{}

type FilePartMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FilePartMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain FilePartMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = FilePartMetadata_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FilePart) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["file"]; raw != nil && !ok {
		return fmt.Errorf("field file in FilePart: required")
	}
	type Plain FilePart
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "file"
	}
	*j = FilePart(plain)
	return nil
}

type GetTaskPushNotificationRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskIdParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskPushNotificationRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in GetTaskPushNotificationRequest: required")
	}
	type Plain GetTaskPushNotificationRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/pushNotification/get"
	}
	*j = GetTaskPushNotificationRequest(plain)
	return nil
}

type GetTaskPushNotificationResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *GetTaskPushNotificationResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id interface{} `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *GetTaskPushNotificationResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type GetTaskPushNotificationResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskPushNotificationResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var getTaskPushNotificationResponseError_0 GetTaskPushNotificationResponseError
	var getTaskPushNotificationResponseError_1 GetTaskPushNotificationResponseError
	var errs []error
	if err := getTaskPushNotificationResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := getTaskPushNotificationResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain GetTaskPushNotificationResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = GetTaskPushNotificationResponseError(plain)
	return nil
}

type GetTaskPushNotificationResponseResult struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// PushNotificationConfig corresponds to the JSON schema field
	// "pushNotificationConfig".
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig" yaml:"pushNotificationConfig" mapstructure:"pushNotificationConfig"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskPushNotificationResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var getTaskPushNotificationResponseResult_0 GetTaskPushNotificationResponseResult
	var getTaskPushNotificationResponseResult_1 GetTaskPushNotificationResponseResult
	var errs []error
	if err := getTaskPushNotificationResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := getTaskPushNotificationResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain GetTaskPushNotificationResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = GetTaskPushNotificationResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskPushNotificationResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain GetTaskPushNotificationResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = GetTaskPushNotificationResponse(plain)
	return nil
}

type GetTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskQueryParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in GetTaskRequest: required")
	}
	type Plain GetTaskRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/get"
	}
	*j = GetTaskRequest(plain)
	return nil
}

type GetTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *GetTaskResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *GetTaskResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type GetTaskResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var getTaskResponseError_0 GetTaskResponseError
	var getTaskResponseError_1 GetTaskResponseError
	var errs []error
	if err := getTaskResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := getTaskResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain GetTaskResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = GetTaskResponseError(plain)
	return nil
}

type GetTaskResponseResult struct {
	// Artifacts corresponds to the JSON schema field "artifacts".
	Artifacts []Artifact `json:"artifacts,omitempty" yaml:"artifacts,omitempty" mapstructure:"artifacts,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata GetTaskResponseResultMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type GetTaskResponseResultMetadata map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var getTaskResponseResult_0 GetTaskResponseResult
	var getTaskResponseResult_1 GetTaskResponseResult
	var errs []error
	if err := getTaskResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := getTaskResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain GetTaskResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = GetTaskResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetTaskResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain GetTaskResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = GetTaskResponse(plain)
	return nil
}

type InternalError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InternalError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain InternalError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32603.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Internal error"
	}
	*j = InternalError(plain)
	return nil
}

type InvalidParamsError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InvalidParamsError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain InvalidParamsError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32602.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Invalid parameters"
	}
	*j = InvalidParamsError(plain)
	return nil
}

type InvalidRequestError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InvalidRequestError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain InvalidRequestError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32600.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Request payload validation error"
	}
	*j = InvalidRequestError(plain)
	return nil
}

type JSONParseError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONParseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain JSONParseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32700.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Invalid JSON payload"
	}
	*j = JSONParseError(plain)
	return nil
}

type JSONRPCError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["code"]; raw != nil && !ok {
		return fmt.Errorf("field code in JSONRPCError: required")
	}
	if _, ok := raw["message"]; raw != nil && !ok {
		return fmt.Errorf("field message in JSONRPCError: required")
	}
	type Plain JSONRPCError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = JSONRPCError(plain)
	return nil
}

type JSONRPCMessage struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCMessage) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain JSONRPCMessage
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = JSONRPCMessage(plain)
	return nil
}

type JSONRPCRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params JSONRPCRequestParams `json:"params,omitempty" yaml:"params,omitempty" mapstructure:"params,omitempty"`
}

type JSONRPCRequestParams map[string]interface{}

type JSONRPCRequestParams_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCRequestParams_0) UnmarshalJSON(value []byte) error {
	type Plain JSONRPCRequestParams_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = JSONRPCRequestParams_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["method"]; raw != nil && !ok {
		return fmt.Errorf("field method in JSONRPCRequest: required")
	}
	type Plain JSONRPCRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = JSONRPCRequest(plain)
	return nil
}

type JSONRPCResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *JSONRPCResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result interface{} `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type JSONRPCResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var jSONRPCResponseError_0 JSONRPCResponseError
	var jSONRPCResponseError_1 JSONRPCResponseError
	var errs []error
	if err := jSONRPCResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := jSONRPCResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain JSONRPCResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = JSONRPCResponseError(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *JSONRPCResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain JSONRPCResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = JSONRPCResponse(plain)
	return nil
}

type Message struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata MessageMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Parts corresponds to the JSON schema field "parts".
	Parts []MessagePartsElem `json:"parts" yaml:"parts" mapstructure:"parts"`

	// Role corresponds to the JSON schema field "role".
	Role MessageRole `json:"role" yaml:"role" mapstructure:"role"`
}

type MessageMetadata map[string]interface{}

type MessageMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain MessageMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = MessageMetadata_0(plain)
	return nil
}

type MessagePartsElem interface{}

type MessageRole string

const MessageRoleAgent MessageRole = "agent"
const MessageRoleUser MessageRole = "user"

var enumValues_MessageRole = []interface{}{
	"user",
	"agent",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MessageRole) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MessageRole {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MessageRole, v)
	}
	*j = MessageRole(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Message) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["parts"]; raw != nil && !ok {
		return fmt.Errorf("field parts in Message: required")
	}
	if _, ok := raw["role"]; raw != nil && !ok {
		return fmt.Errorf("field role in Message: required")
	}
	type Plain Message
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Message(plain)
	return nil
}

type MethodNotFoundError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MethodNotFoundError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in MethodNotFoundError: required")
	}
	type Plain MethodNotFoundError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32601.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Method not found"
	}
	*j = MethodNotFoundError(plain)
	return nil
}

type Part interface{}

type PushNotificationConfig struct {
	// Authentication corresponds to the JSON schema field "authentication".
	Authentication *PushNotificationConfigAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// Token corresponds to the JSON schema field "token".
	Token string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type PushNotificationConfigAuthentication struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PushNotificationConfigAuthentication) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var pushNotificationConfigAuthentication_0 PushNotificationConfigAuthentication
	var pushNotificationConfigAuthentication_1 PushNotificationConfigAuthentication
	var errs []error
	if err := pushNotificationConfigAuthentication_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := pushNotificationConfigAuthentication_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain PushNotificationConfigAuthentication
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	st := reflect.TypeOf(Plain{})
	for i := range st.NumField() {
		delete(raw, st.Field(i).Name)
		delete(raw, strings.Split(st.Field(i).Tag.Get("json"), ",")[0])
	}
	if err := mapstructure.Decode(raw, &plain.AdditionalProperties); err != nil {
		return err
	}
	*j = PushNotificationConfigAuthentication(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PushNotificationConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in PushNotificationConfig: required")
	}
	type Plain PushNotificationConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = PushNotificationConfig(plain)
	return nil
}

type PushNotificationNotSupportedError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PushNotificationNotSupportedError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in PushNotificationNotSupportedError: required")
	}
	type Plain PushNotificationNotSupportedError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32003.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Push Notification is not supported"
	}
	*j = PushNotificationNotSupportedError(plain)
	return nil
}

type SendTaskRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskSendParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in SendTaskRequest: required")
	}
	type Plain SendTaskRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/send"
	}
	*j = SendTaskRequest(plain)
	return nil
}

type SendTaskResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *SendTaskResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *SendTaskResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type SendTaskResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var sendTaskResponseError_0 SendTaskResponseError
	var sendTaskResponseError_1 SendTaskResponseError
	var errs []error
	if err := sendTaskResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := sendTaskResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SendTaskResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SendTaskResponseError(plain)
	return nil
}

type SendTaskResponseResult struct {
	// Artifacts corresponds to the JSON schema field "artifacts".
	Artifacts []Artifact `json:"artifacts,omitempty" yaml:"artifacts,omitempty" mapstructure:"artifacts,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata SendTaskResponseResultMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type SendTaskResponseResultMetadata map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var sendTaskResponseResult_0 SendTaskResponseResult
	var sendTaskResponseResult_1 SendTaskResponseResult
	var errs []error
	if err := sendTaskResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := sendTaskResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SendTaskResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SendTaskResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SendTaskResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = SendTaskResponse(plain)
	return nil
}

type SendTaskStreamingRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskSendParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskStreamingRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in SendTaskStreamingRequest: required")
	}
	type Plain SendTaskStreamingRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/sendSubscribe"
	}
	*j = SendTaskStreamingRequest(plain)
	return nil
}

type SendTaskStreamingResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *SendTaskStreamingResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *SendTaskStreamingResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type SendTaskStreamingResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskStreamingResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var sendTaskStreamingResponseError_0 SendTaskStreamingResponseError
	var sendTaskStreamingResponseError_1 SendTaskStreamingResponseError
	var errs []error
	if err := sendTaskStreamingResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := sendTaskStreamingResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SendTaskStreamingResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SendTaskStreamingResponseError(plain)
	return nil
}

type SendTaskStreamingResponseResult struct {
	// Artifact corresponds to the JSON schema field "artifact".
	Artifact Artifact `json:"artifact" yaml:"artifact" mapstructure:"artifact"`

	// Final corresponds to the JSON schema field "final".
	Final bool `json:"final,omitempty" yaml:"final,omitempty" mapstructure:"final,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata SendTaskStreamingResponseResultMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type SendTaskStreamingResponseResultMetadata map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskStreamingResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var sendTaskStreamingResponseResult_0 SendTaskStreamingResponseResult
	var sendTaskStreamingResponseResult_1 SendTaskStreamingResponseResult
	var sendTaskStreamingResponseResult_2 SendTaskStreamingResponseResult
	var errs []error
	if err := sendTaskStreamingResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := sendTaskStreamingResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := sendTaskStreamingResponseResult_2.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 3 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SendTaskStreamingResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SendTaskStreamingResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SendTaskStreamingResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SendTaskStreamingResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = SendTaskStreamingResponse(plain)
	return nil
}

type SetTaskPushNotificationRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskPushNotificationConfig `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetTaskPushNotificationRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in SetTaskPushNotificationRequest: required")
	}
	type Plain SetTaskPushNotificationRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/pushNotification/set"
	}
	*j = SetTaskPushNotificationRequest(plain)
	return nil
}

type SetTaskPushNotificationResponse struct {
	// Error corresponds to the JSON schema field "error".
	Error *SetTaskPushNotificationResponseError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Result corresponds to the JSON schema field "result".
	Result *SetTaskPushNotificationResponseResult `json:"result,omitempty" yaml:"result,omitempty" mapstructure:"result,omitempty"`
}

type SetTaskPushNotificationResponseError struct {
	// Code corresponds to the JSON schema field "code".
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Message corresponds to the JSON schema field "message".
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetTaskPushNotificationResponseError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var setTaskPushNotificationResponseError_0 SetTaskPushNotificationResponseError
	var setTaskPushNotificationResponseError_1 SetTaskPushNotificationResponseError
	var errs []error
	if err := setTaskPushNotificationResponseError_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := setTaskPushNotificationResponseError_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SetTaskPushNotificationResponseError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SetTaskPushNotificationResponseError(plain)
	return nil
}

type SetTaskPushNotificationResponseResult struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// PushNotificationConfig corresponds to the JSON schema field
	// "pushNotificationConfig".
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig" yaml:"pushNotificationConfig" mapstructure:"pushNotificationConfig"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetTaskPushNotificationResponseResult) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var setTaskPushNotificationResponseResult_0 SetTaskPushNotificationResponseResult
	var setTaskPushNotificationResponseResult_1 SetTaskPushNotificationResponseResult
	var errs []error
	if err := setTaskPushNotificationResponseResult_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := setTaskPushNotificationResponseResult_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain SetTaskPushNotificationResponseResult
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = SetTaskPushNotificationResponseResult(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetTaskPushNotificationResponse) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	type Plain SetTaskPushNotificationResponse
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	*j = SetTaskPushNotificationResponse(plain)
	return nil
}

type Task struct {
	// Artifacts corresponds to the JSON schema field "artifacts".
	Artifacts []Artifact `json:"artifacts,omitempty" yaml:"artifacts,omitempty" mapstructure:"artifacts,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type TaskArtifactUpdateEvent struct {
	// Artifact corresponds to the JSON schema field "artifact".
	Artifact Artifact `json:"artifact" yaml:"artifact" mapstructure:"artifact"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskArtifactUpdateEventMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskArtifactUpdateEventMetadata map[string]interface{}

type TaskArtifactUpdateEventMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskArtifactUpdateEventMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskArtifactUpdateEventMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskArtifactUpdateEventMetadata_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskArtifactUpdateEvent) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["artifact"]; raw != nil && !ok {
		return fmt.Errorf("field artifact in TaskArtifactUpdateEvent: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskArtifactUpdateEvent: required")
	}
	type Plain TaskArtifactUpdateEvent
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskArtifactUpdateEvent(plain)
	return nil
}

type TaskIdParams struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskIdParamsMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskIdParamsMetadata map[string]interface{}

type TaskIdParamsMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskIdParamsMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskIdParamsMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskIdParamsMetadata_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskIdParams) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskIdParams: required")
	}
	type Plain TaskIdParams
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskIdParams(plain)
	return nil
}

type TaskMetadata map[string]interface{}

type TaskMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskMetadata_0(plain)
	return nil
}

type TaskNotCancelableError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskNotCancelableError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in TaskNotCancelableError: required")
	}
	type Plain TaskNotCancelableError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32002.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Task cannot be canceled"
	}
	*j = TaskNotCancelableError(plain)
	return nil
}

type TaskNotFoundError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskNotFoundError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in TaskNotFoundError: required")
	}
	type Plain TaskNotFoundError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32001.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "Task not found"
	}
	*j = TaskNotFoundError(plain)
	return nil
}

type TaskPushNotificationConfig struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// PushNotificationConfig corresponds to the JSON schema field
	// "pushNotificationConfig".
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig" yaml:"pushNotificationConfig" mapstructure:"pushNotificationConfig"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskPushNotificationConfig) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskPushNotificationConfig: required")
	}
	if _, ok := raw["pushNotificationConfig"]; raw != nil && !ok {
		return fmt.Errorf("field pushNotificationConfig in TaskPushNotificationConfig: required")
	}
	type Plain TaskPushNotificationConfig
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskPushNotificationConfig(plain)
	return nil
}

type TaskQueryParams struct {
	// HistoryLength corresponds to the JSON schema field "historyLength".
	HistoryLength int `json:"historyLength,omitempty" yaml:"historyLength,omitempty" mapstructure:"historyLength,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskQueryParamsMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

type TaskQueryParamsMetadata map[string]interface{}

type TaskQueryParamsMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskQueryParamsMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskQueryParamsMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskQueryParamsMetadata_0(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskQueryParams) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskQueryParams: required")
	}
	type Plain TaskQueryParams
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskQueryParams(plain)
	return nil
}

type TaskResubscriptionRequest struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// Jsonrpc corresponds to the JSON schema field "jsonrpc".
	Jsonrpc string `json:"jsonrpc,omitempty" yaml:"jsonrpc,omitempty" mapstructure:"jsonrpc,omitempty"`

	// Method corresponds to the JSON schema field "method".
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// Params corresponds to the JSON schema field "params".
	Params TaskQueryParams `json:"params" yaml:"params" mapstructure:"params"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskResubscriptionRequest) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["params"]; raw != nil && !ok {
		return fmt.Errorf("field params in TaskResubscriptionRequest: required")
	}
	type Plain TaskResubscriptionRequest
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["jsonrpc"]; !ok || v == nil {
		plain.Jsonrpc = "2.0"
	}
	if v, ok := raw["method"]; !ok || v == nil {
		plain.Method = "tasks/resubscribe"
	}
	*j = TaskResubscriptionRequest(plain)
	return nil
}

type TaskSendParams struct {
	// HistoryLength corresponds to the JSON schema field "historyLength".
	HistoryLength int `json:"historyLength,omitempty" yaml:"historyLength,omitempty" mapstructure:"historyLength,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Message corresponds to the JSON schema field "message".
	Message Message `json:"message" yaml:"message" mapstructure:"message"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskSendParamsMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// PushNotification corresponds to the JSON schema field "pushNotification".
	PushNotification *TaskSendParamsPushNotification `json:"pushNotification,omitempty" yaml:"pushNotification,omitempty" mapstructure:"pushNotification,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId *string `json:"sessionId,omitempty" yaml:"sessionId,omitempty" mapstructure:"sessionId,omitempty"`
}

type TaskSendParamsMetadata map[string]interface{}

type TaskSendParamsMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskSendParamsMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskSendParamsMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskSendParamsMetadata_0(plain)
	return nil
}

type TaskSendParamsPushNotification struct {
	// Authentication corresponds to the JSON schema field "authentication".
	Authentication *TaskSendParamsPushNotificationAuthentication `json:"authentication,omitempty" yaml:"authentication,omitempty" mapstructure:"authentication,omitempty"`

	// Token corresponds to the JSON schema field "token".
	Token string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

type TaskSendParamsPushNotificationAuthentication struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials string `json:"credentials,omitempty" yaml:"credentials,omitempty" mapstructure:"credentials,omitempty"`

	// Schemes corresponds to the JSON schema field "schemes".
	Schemes []string `json:"schemes" yaml:"schemes" mapstructure:"schemes"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskSendParamsPushNotificationAuthentication) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var taskSendParamsPushNotificationAuthentication_0 TaskSendParamsPushNotificationAuthentication
	var taskSendParamsPushNotificationAuthentication_1 TaskSendParamsPushNotificationAuthentication
	var errs []error
	if err := taskSendParamsPushNotificationAuthentication_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := taskSendParamsPushNotificationAuthentication_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain TaskSendParamsPushNotificationAuthentication
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	st := reflect.TypeOf(Plain{})
	for i := range st.NumField() {
		delete(raw, st.Field(i).Name)
		delete(raw, strings.Split(st.Field(i).Tag.Get("json"), ",")[0])
	}
	if err := mapstructure.Decode(raw, &plain.AdditionalProperties); err != nil {
		return err
	}
	*j = TaskSendParamsPushNotificationAuthentication(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskSendParamsPushNotification) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var taskSendParamsPushNotification_0 TaskSendParamsPushNotification
	var taskSendParamsPushNotification_1 TaskSendParamsPushNotification
	var errs []error
	if err := taskSendParamsPushNotification_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := taskSendParamsPushNotification_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain TaskSendParamsPushNotification
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskSendParamsPushNotification(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskSendParams) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskSendParams: required")
	}
	if _, ok := raw["message"]; raw != nil && !ok {
		return fmt.Errorf("field message in TaskSendParams: required")
	}
	type Plain TaskSendParams
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskSendParams(plain)
	return nil
}

type TaskState string

const TaskStateCanceled TaskState = "canceled"
const TaskStateCompleted TaskState = "completed"
const TaskStateFailed TaskState = "failed"
const TaskStateInputRequired TaskState = "input-required"
const TaskStateSubmitted TaskState = "submitted"
const TaskStateUnknown TaskState = "unknown"
const TaskStateWorking TaskState = "working"

var enumValues_TaskState = []interface{}{
	"submitted",
	"working",
	"input-required",
	"completed",
	"canceled",
	"failed",
	"unknown",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskState) UnmarshalJSON(value []byte) error {
	var v string
	if err := json.Unmarshal(value, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TaskState {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TaskState, v)
	}
	*j = TaskState(v)
	return nil
}

type TaskStatus struct {
	// Message corresponds to the JSON schema field "message".
	Message *TaskStatusMessage `json:"message,omitempty" yaml:"message,omitempty" mapstructure:"message,omitempty"`

	// State corresponds to the JSON schema field "state".
	State TaskState `json:"state" yaml:"state" mapstructure:"state"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`
}

type TaskStatusMessage struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskStatusMessageMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Parts corresponds to the JSON schema field "parts".
	Parts []MessagePartsElem `json:"parts" yaml:"parts" mapstructure:"parts"`

	// Role corresponds to the JSON schema field "role".
	Role MessageRole `json:"role" yaml:"role" mapstructure:"role"`
}

type TaskStatusMessageMetadata map[string]interface{}

type JSONRPCResponseError_0 = JSONRPCError
type CancelTaskResponseResult_0 = Task

// UnmarshalJSON implements json.Unmarshaler.
func (j *Task) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in Task: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in Task: required")
	}
	type Plain Task
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = Task(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskStatus) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["state"]; raw != nil && !ok {
		return fmt.Errorf("field state in TaskStatus: required")
	}
	type Plain TaskStatus
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskStatus(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskStatusUpdateEvent) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TaskStatusUpdateEvent: required")
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in TaskStatusUpdateEvent: required")
	}
	type Plain TaskStatusUpdateEvent
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["final"]; !ok || v == nil {
		plain.Final = false
	}
	*j = TaskStatusUpdateEvent(plain)
	return nil
}

type SendTaskStreamingResponseResult_0 = TaskStatusUpdateEvent
type SendTaskStreamingResponseResult_1 = TaskArtifactUpdateEvent
type TaskStatusUpdateEvent struct {
	// Final corresponds to the JSON schema field "final".
	Final bool `json:"final,omitempty" yaml:"final,omitempty" mapstructure:"final,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TaskStatusUpdateEventMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status TaskStatus `json:"status" yaml:"status" mapstructure:"status"`
}

type TaskStatusUpdateEventMetadata map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskStatusUpdateEventMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TaskStatusUpdateEventMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskStatusUpdateEventMetadata_0(plain)
	return nil
}

type TaskStatusUpdateEventMetadata_0 map[string]interface{}

type PushNotificationConfigAuthentication_0 = AuthenticationInfo
type GetTaskPushNotificationResponseResult_0 = TaskPushNotificationConfig
type SendTaskStreamingResponseError_0 = JSONRPCError
type SetTaskPushNotificationResponseError_0 = JSONRPCError
type SendTaskResponseResult_0 = Task
type GetTaskPushNotificationResponseError_0 = JSONRPCError
type SetTaskPushNotificationResponseResult_0 = TaskPushNotificationConfig
type SendTaskResponseError_0 = JSONRPCError

// UnmarshalJSON implements json.Unmarshaler.
func (j *TaskStatusMessage) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	var taskStatusMessage_0 TaskStatusMessage
	var taskStatusMessage_1 TaskStatusMessage
	var errs []error
	if err := taskStatusMessage_0.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if err := taskStatusMessage_1.UnmarshalJSON(value); err != nil {
		errs = append(errs, err)
	}
	if len(errs) == 2 {
		return fmt.Errorf("all validators failed: %s", errors.Join(errs...))
	}
	type Plain TaskStatusMessage
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TaskStatusMessage(plain)
	return nil
}

type GetTaskResponseResult_0 = Task
type GetTaskResponseError_0 = JSONRPCError
type TaskStatusMessage_0 = Message
type CancelTaskResponseError_0 = JSONRPCError
type AgentCardProvider_0 = AgentProvider
type AgentCardAuthentication_0 = AgentAuthentication
type TaskSendParamsPushNotification_0 = PushNotificationConfig
type TaskSendParamsPushNotificationAuthentication_0 = AuthenticationInfo
type TextPartMetadata_0 map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TextPartMetadata_0) UnmarshalJSON(value []byte) error {
	type Plain TextPartMetadata_0
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = TextPartMetadata_0(plain)
	return nil
}

type TextPartMetadata map[string]interface{}

type TextPart struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata TextPartMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text" mapstructure:"text"`

	// Type of the part
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TextPart) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["text"]; raw != nil && !ok {
		return fmt.Errorf("field text in TextPart: required")
	}
	type Plain TextPart
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "text"
	}
	*j = TextPart(plain)
	return nil
}

type UnsupportedOperationError struct {
	// Error code
	Code int `json:"code" yaml:"code" mapstructure:"code"`

	// Data corresponds to the JSON schema field "data".
	Data interface{} `json:"data" yaml:"data" mapstructure:"data"`

	// A short description of the error
	Message string `json:"message" yaml:"message" mapstructure:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsupportedOperationError) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in UnsupportedOperationError: required")
	}
	type Plain UnsupportedOperationError
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if v, ok := raw["code"]; !ok || v == nil {
		plain.Code = -32004.0
	}
	if v, ok := raw["message"]; !ok || v == nil {
		plain.Message = "This operation is not supported"
	}
	*j = UnsupportedOperationError(plain)
	return nil
}
